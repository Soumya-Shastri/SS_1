import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objs as go 
import plotly.io as pio 
pio.templates.default = 'plotly_white'
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf,plot_pacf
import os
print(os.getcwd())
topic = pd.read_csv('Netflix-Subscriptions.csv')
print(topic.head())
#head is used to print 1st 5 rows of a data set , if we write topic.head(10) then it is going to mention
#1st 10 rows of the data 

fig = go.Figure()
fig.add_trace(go.Scatter(x=topic['Time Period'], y = topic['Subscribers'], 
                         mode = 'lines', name ='Subscribers'))
fig.update_layout(title='Netflix Quarterly Subscriptions Growth',
                 xaxis_title = 'Date',
                 yaxis_title = 'Netflix Subscriptions')
fig.show()

topic['Quarterly Growth Rate'] = topic ['Subscribers'].pct_change()*100
topic['Bar Color'] = topic['Quarterly Growth Rate'].apply (lambda x: 'green' if x >0 else 'red')
fig = go.Figure()
fig.add_trace(go.Bar(x = topic['Time Period'], y =topic['Quarterly Growth Rate'],marker_color = topic['Bar Color'], name = 'Quarterly Growth Rate'))
fig.update_layout(title ='Netflix Quarterly Subscriptions Growth Rate', xaxis_title = 'Time Period',yaxis_title = 'Quarterly Growth Rate(%)')
fig.show()
topic['Year'] = topic['Time Period'].dt.year
yearly_growth = topic.groupby('Year')['Subscribers'].pct_change().fillna(0)*100
topic['Bar Color'] = yearly_growth.apply(lambda x: 'green' if x > 0 else 'red')
fig = go.Figure()
fig.add_trace(go.Bar(x = topic['Year'],y = yearly_growth, marker_color = topic['Bar Color'],name = 'Yearly Growth Rate'))

fig.update_layout(title ='Netflix Yearly Subcriber Growth Rate' ,xaxis_title = 'Year', yaxis_title = 'Yearly Growth Rate (%)')
fig.show()
#ARIMA is a method of Time series forecasting
time_series = topic.set_index('Time Period')['Subscribers']
differenced_series = time_series.diff().dropna()
fig,axes = plt.subplots(1,2,figsize = (12,4))
plot_acf(differenced_series, ax = axes[0])
plot_pacf(differenced_series, ax = axes[1])
plt.show()
p,d,q = 1,1,1
model = ARIMA(time_series, order = (p,d,q))
results = model.fit()
print(results.summary())
future_steps = 5
predictions = results.predict(len(time_series),len(time_series)+ future_steps - 1)
predictions = predictions.astype(int)
forecast = pd.DataFrame({'Original' : time_series , 'Predictions': predictions})
fig = go.Figure()
fig.add_trace(go.Scatter(x = forecast.index, y = forecast['Predictions'], mode = 'lines', name = 'Predictions'))
fig.add_trace(go.Scatter(x = forecast.index , y =forecast['Original'], mode ='lines', name ='Original Data'))
fig.update_layout(title ='Netflix Quarterly Subscription Predictions',
                  xaxis_title = 'Time Period',
                  yaxis_title = 'Subscribers',
                  legend = dict (x=0.1, y = 0.9),
                  showlegend = True)
                  
fig.show()
